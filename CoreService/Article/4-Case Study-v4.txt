We have tried and tested our interoperability solution with the following situation.


//İMAGE
//İMAGE
//İMAGE
figure[coreWithSystems.png]


//İMAGE
//İMAGE
//İMAGE
figure[coreSequence.png]

In figure[coreWithSystems.png], you can see the whole systems, access control system of Building A, access control system of Building B, and our interoperability solution consisting of Converter Configurator, Middleware Converters for Building A and Building B, and Middle Middleware, which is RabbitMQ. 
In Building A, there is a service which is publishing new messages about entrance and exit of employees to a topic named as "track" in its middleware, which is RabbitMQ, and there is a service which is subscribed to two topics to show employee activities, these two topics are "track" and "buildingB_track", it is subscribed to "track" topic to show employee activities of Building A, and it is subscribed to "buildingB_track" topic to show employee activities of Building B.
In Building B, there is a service which is publishing new messages about entrance and exit of employees to a topic named as "movement" in its middleware, which is Kafka, and there is a service which is subscribed to two topics to show employee activities, these two topics are "movement" and "buildingA_movement", it is subscribed to "movement" topic to show employee activities of Building B, and it is subscribed to "buildingA_movement" topic to show employee activities of Building A.
In this scenario, our interoperability solution will forward new messages published to "track" topic in Building A's middleware to "buildingA_movement" topic in Building B's middleware, and "movement" topic in Building B's middleware to "buildingB_track" in Building A's middleware. However, the figures shows only how to forward new messages published to "track" topic in Building A's middleware to "buildingA_movement" topic in Building B's middleware because forwarding from Building B to Building A is very similar, and adding these operations to figures would make them very crowded.
The sequence diagram in figure[coreSequence.png] shows how we configure our interoperability tool so that it can achieve the desired result. As seen in the figure[coreSequence.png], Middleware Converter for Building A (Building A's converter) and Middleware Converter for Building B (Building B's converter) will firstly send a request to Converter Configurator service's /registerConverter endpoint with systemName, converterIP, converterPort, systemBrokerIP, systemBrokerPort paramaters, systemName is "Building A" and "Building B" for buildings respectively. From now on, Converter Configurator service can configure these Middleware Converters with sending requests to their respective converterIP and converterPort stated in their request to /registerConverter endpoint. After some time, the user of the interoperability tool sends a request to Converter Configurator's /publishToMiddleBroker endpoint with systemName: "Building A", systemBrokerTopic: "track", middleBrokerTopic: "track_A" parameters with the intention to make Building A's converter forward messages from its system broker's "track" topic to middle broker's "track" topic. Converter Configurator sends a request to Building A's converter service's /publishToMiddle endpoint with systemBrokerTopic: "track", middleBrokerTopic: "track_A" paramaters. Then Building A's converter connect both its system middleware and middleware, and then subscribes to "track" topic in its system middleware to get new messages in this topic to forward these new messages to "track_A" topic in middle middleware. Next, the user of the tool sends another request to Converter Configurator's /subscribeToMiddleBroker endpoint with systemName: "Building B", middleBrokerTopic: "track_A", systemBrokerTopic: "buildingA_movement" parameters with the intention to make Building B's converter forward messages from middle broker's "track_A" topic to its system broker's "buildingA_movement" topic so that Building B's acces control system can show employee activities of Building A. Converter Configurator sends a request to Building B's converter service's /publishToSystem endpoint with middleBrokerTopic: "track_A", systemBrokerTopic: "buildingA_movement" paramaters. Then Building B's converter connect both its system middleware and middleware, and then subscribes to "track_A" topic in middle middleware to get new messages in this topic to forward these new messages to "buildingA_movement" topic in its system middleware. After these two requests to Converter Configurator service, Building A's converter service gets new messages in "track" topic in Building A's middleware, publishes these new messages to "track_A" topic in middle middleware, and Building B's converter get new messages in "track_A" topic in middle middleware, publishes these new messages to "buildingA_movement" topic in Building B's middleware, so that Building B's access control system can show employee activities of Building A.
Next, the user of interoperability tool sends another two similar requests to Converter Configurator service to make Building B's converter forward new messages in "movement" topic its system middleware to "movement_B" topic in middle middleware, and to make Building A's converter forward new messages in "movement_B" topic in middle middleware to "buildingB_track" topic in its system middleware, so that Building A's access control system can show employee activities of Building B.